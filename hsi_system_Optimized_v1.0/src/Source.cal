import hsi_analysis.Data.*;
/*
 * Copyright (c) 2011, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Herve Yvique <herve.yviquel@irisa.fr>
// Modified by Damien de Saint Jorre IETR/INSA of Rennes (France)
// Modified by Jerome Gorin IETR/INSA of Rennes (France)
// Modified by Ren Rong, Wei Jianguo and Eduardo Juarez <eduardo.juarez@upm.es> of UPM (Spain) 

// UPM 20120126
// package org.ietr.stdio;
// package inputOutput;

// UPM 20120130




/*THIS SOURCE.CAL ONLY READS BSQ FILES */




//actor Source () ==> uint(size=8) Stream :
actor Source () ==> float Stream, bool EOF:

//actor Source () ==> uint(size=16) Stream, bool EOF:
	
	// UPM 20120130
	bool  	DEBUG := false;
	
	@native procedure source_init()
	end

	@native procedure source_readNBytes(uint(size=8) outTable[NB_TOKEN_TO_SENT], uint(size=12) nbTokenToRead)
	end

	@native procedure source_readNWordsTwoBytes(uint(size=16) outTable[NB_TOKEN_TO_SENT], uint(size=12) nbTokenToRead)
	end
	
	@native procedure source_setFilePosition(uint(size=64) offset)
	end

	@native function source_sizeOfFile() --> int(size=32)
	end

	@native procedure source_rewind()
	end

	@native function source_getNbLoop() --> uint
	end
	// UPM 20120127
	@native procedure source_close()
	end
	
// 	UPM 20120126
//	uint(size=32) NB_TOKEN_TO_SENT = 4096;
	uint(size=32) NB_TOKEN_TO_SENT = 1; 
	
	uint(size=8) bytesRead[NB_TOKEN_TO_SENT];
	uint(size=16) elementsRead[NB_TOKEN_TO_SENT];
	
	uint(size=8) tokenByte[bands];
	uint(size=16) tokenElement[bands];
	
	uint(size=64) iterationLoop := 0;
	uint(size=64) nbByteToSend := 0;
	uint(size=64) nbByteSent := 0;
	uint(size=64) nbIteration;
	 
	uint(size=64) offset := 0;
	uint(size=64) seq_sum := (rows*columns);
	uint(size=64) seq_displ := 0;
	uint(size=64) loop := 0;
	uint(size=8) numBytes := nbits/8;
	uint(size = 32) contador :=0;
	
	// UPM 20120128
	bool		  lastIterationDone := false;
	// UPM 20120130
	bool          endOfFile := false;


	initialize ==>
	do
		source_init();
		if (DEBUG) then
			//UPM 20120128
			println("Source ACTION: initialize");
			println("Source STATE: ReadInit");
			println("-------------------------");
		end
	end
	
	getFileSize: action ==>
	guard
		source_sizeOfFile() > 0
	var
		uint(size=64) nbElements
	do
		nbElements := source_sizeOfFile()/numBytes;
		nbIteration := (nbElements / NB_TOKEN_TO_SENT);
		
		if (DEBUG) then
			//UPM 20120128
			println("Source ACTION: getFileSize");
			println("Source STATE: ReadFile");
			println("-------------------------");
		end
	end
	
	readNBytes: action ==>
	guard
		iterationLoop < (nbIteration-1)
	do
	//	println("");	
	//	println("SOURCE" + contador);
		if (contador = 0) then
			println("Send data: start");
		end
		contador := contador +1;
	//	println("El string a enviar es:");		
		foreach int i in 0 .. (bands-1) do
			if(loop = (bands-1)) then
				offset := seq_displ + (seq_sum)*loop;
				loop := 0;
				seq_displ := seq_displ + 1;	
			else
				offset := seq_displ + (seq_sum)*loop;
				loop := loop + 1;
			end
			source_setFilePosition(numBytes*offset);
			if(numBytes) = 1 then
				source_readNBytes(bytesRead, NB_TOKEN_TO_SENT);
				tokenByte[i] := bytesRead[0];
			else 
				source_readNWordsTwoBytes(elementsRead, NB_TOKEN_TO_SENT);
				tokenElement[i] := elementsRead[0];
			end
		//	print(""+ tokenElement[i]+ "   ");
			iterationLoop := iterationLoop + 1;
		end
		nbByteToSend := NB_TOKEN_TO_SENT;
		nbByteSent := 0;
		
		if (DEBUG) then
			// UPM 20120128
			println("Source ACTION: readNbytes");
			println("Source STATE: SendData");
			println("-------------------------");
		end		
	end
	
	// UPM 20120127, 20120130
	closeFile: action ==> EOF:[ endOfFile ]
	guard
		endOfFile = false
	do	
	//	println("FIN" + contador);
		source_close();	
        if (DEBUG) then
			// UPM 20120128
			println("Source ACTION: closeFile");
			println("Source STATE: ReadFileDone");
			println("-------------------------");
		end
		// UPM 20120130
		endOfFile := true;			
	end
	
	// UPM 20120130	

	sendData.launch: action ==> Stream:[ Out ] repeat bands, EOF:[ endOfFile ]
	guard
		nbByteToSend > nbByteSent
	var
		float Out[bands]
	do
		
		if(numBytes) = 1 then
			Out := tokenByte;
		else 
			Out := tokenElement;
		end
		nbByteSent := nbByteSent + 1;
		
		if (DEBUG) then
			// UPM 20120128
			println("Source ACTION: sendData.launch");
        	if ( ( iterationLoop = nbIteration ) and lastIterationDone ) then
				println("Source STATE: SendLastData");	
				println("-------------------------");      	
        	else
				println("Source STATE: SendData");
				println("-------------------------");
			end
		end
	end
	
	sendData.done: action ==>
	guard
		nbByteToSend = nbByteSent
	do		
		if (DEBUG) then
			// UPM 20120128
			println("Source ACTION: sendData.done");
        	if ( ( iterationLoop = nbIteration ) and lastIterationDone )then
				println("Source STATE: ReadFileDone");
				println("-------------------------");
        	else
				println("Source STATE: ReadFile");
				println("-------------------------");	
				if ( iterationLoop = nbIteration) then
					lastIterationDone := true;
				end		
			end
		end
	end
	
	schedule fsm ReadInit :
		ReadInit (getFileSize) --> ReadFile;
	
		ReadFile (readNBytes   ) --> SendData;
// UPM 20120127
		// UPM 20120128
		ReadFile (sendData.done) --> ReadFileDone;
	
		SendData (sendData.launch) --> SendData;
		SendData (sendData.done  ) --> ReadFile;
	
		SendLastData (sendData.launch) --> SendLastData;
		SendLastData (sendData.done  ) --> ReadFileDone;
// UPM 20120127	 
		ReadFileDone (closeFile) --> ReadFileDone;	
	end
	
	priority
// UPM 20120127	
		readNBytes > sendData.done;		
		sendData.launch > sendData.done;
	end

end